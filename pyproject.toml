[build-system]
requires = ["setuptools>=67.6.1"]
build-backend = "setuptools.build_meta"

[project]
name = "fhy"
description = "Cross Domain Compiler for Accelerators"
license = {file = "LICENSE"}
authors = [
   {name = "Christopher Priebe", email = "cpriebe@ucsd.edu"},
   {name = "Jason C Del Rio", email = "j3delrio@ucsd.edu"},
]
maintainers = [
   {name = "Christopher Priebe", email = "cpriebe@ucsd.edu"},
   {name = "Jason C Del Rio", email = "j3delrio@ucsd.edu"},
]
requires-python = ">=3.10"
keywords = [
   "Compiler", "Cross-Domain Language", "Cross-Domain Compiler", "Multi-Target Compiler"
]
classifiers = [
   "Development Status :: 1 - Planning",
   "Programming Language :: Python :: 3",
   "License :: OSI Approved :: BSD License",
]
dynamic = ["version", "readme", "dependencies"]

[tool.setuptools.dynamic]
version = {attr = "fhy.__version__"}
readme = {file = ["README.md"], content-type = "text/markdown"}
dependencies = {file = ["requirements_build.txt", "requirements.txt"]}

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["grammar", "docs", "tests"]

[project.scripts]
fhy = "fhy.cli:app"

# pydata-sphinx-theme>=0.13 is required as that is the version which upgrades to Bootstrap 5
[project.optional-dependencies]
dev = ["fhy[test,lint,type,docs,rich,pre-commit]", "tox"]
test = ["pytest", "coverage", "pytest-xdist"]
pre-commit = ["pre-commit>3.0.0"]
lint = ["ruff", "pylint"]
type = ["mypy"]
docs = ["sphinx>=5.0.2", "pydata-sphinx-theme==0.15.4"]
rich = ["typer"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-n auto -rA"

[tool.coverage.run]
parallel = true
branch = true
source = ["fhy"]
disable_warnings = [
   "no-data-collected",
   "module-not-imported"
]

[tool.coverage.paths]
source = ["src", "*/.tox/py*/**/site-packages"]

[tool.coverage.report]
format = "markdown"
fail_under = 85.0
precision = 1
show_missing = true
skip_empty = true
skip_covered = true
omit = [
   "src/fhy/lang/parser/FhY*.py",  # Omit Files generated by ANTLR
]
exclude_also = [
   "def __repr__",
   'if __name__ == "__main__"',
   "except KeyboardInterrupt",
]

[tool.mypy]
mypy_path = "src"
pretty = false

[[tool.mypy.overrides]]
module = [
   "fhy.lang.parser.*",  # Omit Files generated by ANTLR
]
ignore_errors = true

[tool.pylint.main]
extension-pkg-whitelist = ["antlr4", "networkx"]
ignore = ["tests", "dist", "build"]
ignore-paths = ["src/fhy/lang/parser/.*"]
fail-under = 9.0
jobs = 0
limit-inference-results = 100
persistent = true
suggestion-mode = true

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "run", "_", "e"]

[tool.pylint.format]
max-line-length = 88

[tool.pylint."messages control"]
disable = [
   "C0103",  # invalid-name
   "C0116",  # missing-function-docstring
   "C1804",  # "use-implicit-booleaness-not-comparison-to-string",
   "C1805",  # use-implicit-booleaness-not-comparison-to-zero
   "I0001",  # raw-checker-failed
   "I0010",  # bad-inline-option
   "I0011",  # locally-disabled
   "I0013",  # file-ignored
   "I0020",  # suppressed-message
   "I0021",  # useless-suppression
   "I0022",  # deprecated-pragma
   "I0023",  # use-symbolic-message-instead
   "R0205",  # useless-object-inheritance
   "R0903",  # too-few-public-methods
   "R0904",  # too-many-public-methods
   "R0911",  # too-many-return-statements
   "R0913",  # too-many-arguments
   "R0914",  # too-many-locals
   "R1705",  # no-else-return
   "R1735",  # use-dict-literal
   "W",  # Warning Codes
   "W0613",  # unused-argument
   "W2301",  # unnecessary-ellipsis
]

[tool.ruff]
# Paths provided to include / exclude must match files.
# For example, include = ["src"] will fail since it matches a directory.
extend-exclude = [
   "grammar/*",   # Omit FhY grammar Files
   "docs/*",  # Omit Files generated by sphinx
   "src/fhy/lang/parser/*.py"  # Omit Files generated by ANTLR
]
line-length = 88
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = [
   "E",  # pycodestyle
   "F",  # Pyflakes
   "I",  # Isort
   "D",  # PyDocstyle
   "W",  # Warning
   "PL",  # Pylint
   "C",  # Convention
   "PYI",  # flake8-pyi
   "UP",  # pyupgrade
   "RUF",  # ruff
   "PIE",  # flake8-pie
   "PGH004",  # pygrep-hooks - Use specific rule codes when using noqa
   "PLE",  # pylint error
   "PLW",  # pylint warning
   "PLR1714",  # Consider merging multiple comparisons
]
ignore = [
   "D102",  # undocumented-public-method (D102)
   "D105",  # undocumented-magic-method (D105)
   "D107",  # undocumented-public-init (D107)
   "D203",  # one-blank-line-before-class (D203)
   "D213",  # multi-line-summary-second-line (D213)
   "PLR0913",  # too-many-arguments (PLR0913)
   "C408",  # unnecessary-collection-call (C408)
   "PLR0911",  # too-many-return-statements (PLR0911)
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Accepts: "google" | "numpy" | "pep257"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
   "E402",  # Import Statement not at Top of File
   "F401",  # Unused Imports
]
"tests/*.py" = [
   "D",  # PyDocstyle
   "F841",  # unused-variable (F841)
   "PLR2004",  # magic-value-comparison (PLR2004)
   "UP022",  # replace-stdout-stderr (UP022)
   "UP031",  # printf-string-formatting (UP031)
]
"*fhy/cli.py" = [
   "UP007",  # non-pep604-annotation (UP007) --> We must use Optional[type] here
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
