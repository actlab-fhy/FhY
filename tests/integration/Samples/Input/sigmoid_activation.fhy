
op sigmoid(input float32[m] x) -> output float32[m] {
   temp index[1:m] i;
   return 1 / (1 + exp(-x[i]));
}

op forward(input float32[n] x, param float32[m, n] W, param float32[m] b) -> output float32[m] {
   temp index[1:m] i;
   temp index[1:n] j;
   temp float32[m] FC_out;

   FC_out[i] = sum[j](W[i, j] * x[j]) + b[i];
   return sigmoid(FC_out);
}

proc main(input float32[examples, n] X, param float32[m, n] W, param float32[m] b, output float32[examples, m] Y) {
    temp index[1:examples] e;
    temp index[1:n] i;
    temp index[1:m] j;

    temp float32[n] x;
    temp float32[m] y;

    forall (e) {
        x[i] = X[e, i];
        y = forward(x, W, b);
        Y[e, j] = y[j];
    }
}
